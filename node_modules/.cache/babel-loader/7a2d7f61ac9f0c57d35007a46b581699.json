{"ast":null,"code":"import _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\sns\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\sns\\\\src\\\\Component\\\\UserStoryCalendar\\\\UserStoryCalendar.js\";\nimport * as React from 'react';\nimport \"./UserStoryCalendar.css\";\nimport { Calendar, LocaleConfig, CalendarList, Agenda } from 'react-native-calendars';\nexport class UserStoryCalendar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}; //\n    // LocaleConfig.locales['fr'] = {\n    //   monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],\n    //   monthNamesShort: ['Janv.','Févr.','Mars','Avril','Mai','Juin','Juil.','Août','Sept.','Oct.','Nov.','Déc.'],\n    //   dayNames: ['Dimanche','Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi'],\n    //   dayNamesShort: ['Dim.','Lun.','Mar.','Mer.','Jeu.','Ven.','Sam.'],\n    //   today: 'Aujourd\\'hui'\n    // };\n    // LocaleConfig.defaultLocale = 'fr';\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Agenda // The list of items that have to be displayed in agenda. If you want to render item as empty date\n    // the value of date key has to be an empty array []. If there exists no value for date key it is\n    // considered that the date in question is not yet loaded\n    , {\n      items: {\n        '2012-05-22': [{\n          name: 'item 1 - any js object'\n        }],\n        '2012-05-23': [{\n          name: 'item 2 - any js object',\n          height: 80\n        }],\n        '2012-05-24': [],\n        '2012-05-25': [{\n          name: 'item 3 - any js object'\n        }, {\n          name: 'any js object'\n        }]\n      } // Callback that gets called when items for a certain month should be loaded (month became visible)\n      ,\n      loadItemsForMonth: month => {\n        console.log('trigger items loading');\n      } // Callback that fires when the calendar is opened or closed\n      ,\n      onCalendarToggled: calendarOpened => {\n        console.log(calendarOpened);\n      } // Callback that gets called on day press\n      ,\n      onDayPress: day => {\n        console.log('day pressed');\n      } // Callback that gets called when day changes while scrolling agenda list\n      ,\n      onDayChange: day => {\n        console.log('day changed');\n      } // Initially selected day\n      ,\n      selected: '2012-05-16' // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n      ,\n      minDate: '2012-05-10' // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n      ,\n      maxDate: '2012-05-30' // Max amount of months allowed to scroll to the past. Default = 50\n      ,\n      pastScrollRange: 50 // Max amount of months allowed to scroll to the future. Default = 50\n      ,\n      futureScrollRange: 50 // Specify how each item should be rendered in agenda\n      ,\n      renderItem: (item, firstItemInDay) => {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      } // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\n      ,\n      renderDay: (day, item) => {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        });\n      } // Specify how empty date content with no items should be rendered\n      ,\n      renderEmptyDate: () => {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      } // Specify how agenda knob should look like\n      ,\n      renderKnob: () => {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      } // Specify what should be rendered instead of ActivityIndicator\n      ,\n      renderEmptyData: () => {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        });\n      } // Specify your item comparison function for increased performance\n      ,\n      rowHasChanged: (r1, r2) => {\n        return r1.text !== r2.text;\n      } // Hide knob button. Default = false\n      ,\n      hideKnob: true // By default, agenda dates are marked if they have at least one item, but you can override this if needed\n      ,\n      markedDates: {\n        '2012-05-16': {\n          selected: true,\n          marked: true\n        },\n        '2012-05-17': {\n          marked: true\n        },\n        '2012-05-18': {\n          disabled: true\n        }\n      } // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\n      ,\n      disabledByDefault: true // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\n      ,\n      onRefresh: () => console.log('refreshing...') // Set this true while waiting for new data from a refresh\n      ,\n      refreshing: false // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\n      ,\n      refreshControl: null // Agenda theme\n      ,\n      theme: _objectSpread({}, calendarTheme, {\n        agendaDayTextColor: 'yellow',\n        agendaDayNumColor: 'green',\n        agendaTodayColor: 'red',\n        agendaKnobColor: 'blue'\n      }) // Agenda container style\n      ,\n      style: {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/xampp/htdocs/sns/src/Component/UserStoryCalendar/UserStoryCalendar.js"],"names":["React","Calendar","LocaleConfig","CalendarList","Agenda","UserStoryCalendar","Component","constructor","props","state","render","name","height","month","console","log","calendarOpened","day","item","firstItemInDay","r1","r2","text","selected","marked","disabled","calendarTheme","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","agendaKnobColor"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,yBAAP;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,YAAhC,EAA8CC,MAA9C,QAA2D,wBAA3D;AAEA,OAAO,MAAMC,iBAAN,SAAgCL,KAAK,CAACM,SAAtC,CAAgD;AAErDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb,CAFiB,CAKjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAKDC,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD,CACE;AACA;AACA;AAHF;AAIE,MAAA,KAAK,EAAE;AACL,sBAAc,CAAC;AAACC,UAAAA,IAAI,EAAE;AAAP,SAAD,CADT;AAEL,sBAAc,CAAC;AAACA,UAAAA,IAAI,EAAE,wBAAP;AAAiCC,UAAAA,MAAM,EAAE;AAAzC,SAAD,CAFT;AAGL,sBAAc,EAHT;AAIL,sBAAc,CAAC;AAACD,UAAAA,IAAI,EAAE;AAAP,SAAD,EAAmC;AAACA,UAAAA,IAAI,EAAE;AAAP,SAAnC;AAJT,OAJT,CAUE;AAVF;AAWE,MAAA,iBAAiB,EAAGE,KAAD,IAAW;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAAqC,OAXtE,CAYE;AAZF;AAaE,MAAA,iBAAiB,EAAGC,cAAD,IAAoB;AAACF,QAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AAA4B,OAbtE,CAcE;AAdF;AAeE,MAAA,UAAU,EAAGC,GAAD,IAAO;AAACH,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA2B,OAfjD,CAgBE;AAhBF;AAiBE,MAAA,WAAW,EAAGE,GAAD,IAAO;AAACH,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAA2B,OAjBlD,CAkBE;AAlBF;AAmBE,MAAA,QAAQ,EAAE,YAnBZ,CAoBE;AApBF;AAqBE,MAAA,OAAO,EAAE,YArBX,CAsBE;AAtBF;AAuBE,MAAA,OAAO,EAAE,YAvBX,CAwBE;AAxBF;AAyBE,MAAA,eAAe,EAAE,EAzBnB,CA0BE;AA1BF;AA2BE,MAAA,iBAAiB,EAAE,EA3BrB,CA4BE;AA5BF;AA6BE,MAAA,UAAU,EAAE,CAACG,IAAD,EAAOC,cAAP,KAA0B;AAAC,eAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAAmB,OA7B5D,CA8BE;AA9BF;AA+BE,MAAA,SAAS,EAAE,CAACF,GAAD,EAAMC,IAAN,KAAe;AAAC,eAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAAmB,OA/BhD,CAgCE;AAhCF;AAiCE,MAAA,eAAe,EAAE,MAAM;AAAC,eAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAAmB,OAjC7C,CAkCE;AAlCF;AAmCE,MAAA,UAAU,EAAE,MAAM;AAAC,eAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAAmB,OAnCxC,CAoCE;AApCF;AAqCE,MAAA,eAAe,EAAI,MAAM;AAAC,eAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAAmB,OArC/C,CAsCE;AAtCF;AAuCE,MAAA,aAAa,EAAE,CAACE,EAAD,EAAKC,EAAL,KAAY;AAAC,eAAOD,EAAE,CAACE,IAAH,KAAYD,EAAE,CAACC,IAAtB;AAA2B,OAvCzD,CAwCE;AAxCF;AAyCE,MAAA,QAAQ,EAAE,IAzCZ,CA0CE;AA1CF;AA2CE,MAAA,WAAW,EAAE;AACX,sBAAc;AAACC,UAAAA,QAAQ,EAAE,IAAX;AAAiBC,UAAAA,MAAM,EAAE;AAAzB,SADH;AAEX,sBAAc;AAACA,UAAAA,MAAM,EAAE;AAAT,SAFH;AAGX,sBAAc;AAACC,UAAAA,QAAQ,EAAE;AAAX;AAHH,OA3Cf,CAgDE;AAhDF;AAiDE,MAAA,iBAAiB,EAAE,IAjDrB,CAkDE;AAlDF;AAmDE,MAAA,SAAS,EAAE,MAAMX,OAAO,CAACC,GAAR,CAAY,eAAZ,CAnDnB,CAoDE;AApDF;AAqDE,MAAA,UAAU,EAAE,KArDd,CAsDE;AAtDF;AAuDE,MAAA,cAAc,EAAE,IAvDlB,CAwDE;AAxDF;AAyDE,MAAA,KAAK,oBACAW,aADA;AAEHC,QAAAA,kBAAkB,EAAE,QAFjB;AAGHC,QAAAA,iBAAiB,EAAE,OAHhB;AAIHC,QAAAA,gBAAgB,EAAE,KAJf;AAKHC,QAAAA,eAAe,EAAE;AALd,QAzDP,CAgEE;AAhEF;AAiEE,MAAA,KAAK,EAAE,EAjET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAuED;;AA9FoD","sourcesContent":["import * as React from 'react';\r\nimport \"./UserStoryCalendar.css\";\r\nimport {Calendar, LocaleConfig, CalendarList, Agenda} from 'react-native-calendars';\r\n\r\nexport class UserStoryCalendar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n    //\r\n    // LocaleConfig.locales['fr'] = {\r\n    //   monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],\r\n    //   monthNamesShort: ['Janv.','Févr.','Mars','Avril','Mai','Juin','Juil.','Août','Sept.','Oct.','Nov.','Déc.'],\r\n    //   dayNames: ['Dimanche','Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi'],\r\n    //   dayNamesShort: ['Dim.','Lun.','Mar.','Mer.','Jeu.','Ven.','Sam.'],\r\n    //   today: 'Aujourd\\'hui'\r\n    // };\r\n    // LocaleConfig.defaultLocale = 'fr';\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Agenda\r\n          // The list of items that have to be displayed in agenda. If you want to render item as empty date\r\n          // the value of date key has to be an empty array []. If there exists no value for date key it is\r\n          // considered that the date in question is not yet loaded\r\n          items={{\r\n            '2012-05-22': [{name: 'item 1 - any js object'}],\r\n            '2012-05-23': [{name: 'item 2 - any js object', height: 80}],\r\n            '2012-05-24': [],\r\n            '2012-05-25': [{name: 'item 3 - any js object'}, {name: 'any js object'}]\r\n          }}\r\n          // Callback that gets called when items for a certain month should be loaded (month became visible)\r\n          loadItemsForMonth={(month) => {console.log('trigger items loading')}}\r\n          // Callback that fires when the calendar is opened or closed\r\n          onCalendarToggled={(calendarOpened) => {console.log(calendarOpened)}}\r\n          // Callback that gets called on day press\r\n          onDayPress={(day)=>{console.log('day pressed')}}\r\n          // Callback that gets called when day changes while scrolling agenda list\r\n          onDayChange={(day)=>{console.log('day changed')}}\r\n          // Initially selected day\r\n          selected={'2012-05-16'}\r\n          // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n          minDate={'2012-05-10'}\r\n          // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n          maxDate={'2012-05-30'}\r\n          // Max amount of months allowed to scroll to the past. Default = 50\r\n          pastScrollRange={50}\r\n          // Max amount of months allowed to scroll to the future. Default = 50\r\n          futureScrollRange={50}\r\n          // Specify how each item should be rendered in agenda\r\n          renderItem={(item, firstItemInDay) => {return (<View />);}}\r\n          // Specify how each date should be rendered. day can be undefined if the item is not first in that day.\r\n          renderDay={(day, item) => {return (<View />);}}\r\n          // Specify how empty date content with no items should be rendered\r\n          renderEmptyDate={() => {return (<View />);}}\r\n          // Specify how agenda knob should look like\r\n          renderKnob={() => {return (<View />);}}\r\n          // Specify what should be rendered instead of ActivityIndicator\r\n          renderEmptyData = {() => {return (<View />);}}\r\n          // Specify your item comparison function for increased performance\r\n          rowHasChanged={(r1, r2) => {return r1.text !== r2.text}}\r\n          // Hide knob button. Default = false\r\n          hideKnob={true}\r\n          // By default, agenda dates are marked if they have at least one item, but you can override this if needed\r\n          markedDates={{\r\n            '2012-05-16': {selected: true, marked: true},\r\n            '2012-05-17': {marked: true},\r\n            '2012-05-18': {disabled: true}\r\n          }}\r\n          // If disabledByDefault={true} dates flagged as not disabled will be enabled. Default = false\r\n          disabledByDefault={true}\r\n          // If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make sure to also set the refreshing prop correctly.\r\n          onRefresh={() => console.log('refreshing...')}\r\n          // Set this true while waiting for new data from a refresh\r\n          refreshing={false}\r\n          // Add a custom RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView.\r\n          refreshControl={null}\r\n          // Agenda theme\r\n          theme={{\r\n            ...calendarTheme,\r\n            agendaDayTextColor: 'yellow',\r\n            agendaDayNumColor: 'green',\r\n            agendaTodayColor: 'red',\r\n            agendaKnobColor: 'blue'\r\n          }}\r\n          // Agenda container style\r\n          style={{}}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}