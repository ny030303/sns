{"ast":null,"code":"export const setObserverVisibility = (element, callback) => {\n  let intersectionObserver = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => callback(entry.intersectionRatio > 0));\n  });\n  intersectionObserver.observe(element);\n};\n\nconst getCallerClassName = () => {\n  let callerClass = new Error().stack.split(\"\\n\")[3].trim().split(\" \")[1];\n  return callerClass.indexOf('.') > 0 ? callerClass.substr(0, callerClass.indexOf('.')) : callerClass;\n};\n\nclass EventService {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  emitEvent(eventName, data = null) {\n    // console.log(\"emit1: \", eventName, data);\n    if (this.callbacks[eventName]) {\n      // console.log(\"emit2: \", eventName, data);\n      Object.keys(this.callbacks[eventName]).forEach(id => {\n        this.callbacks[eventName][id](data); // console.log(\"emit3: \", eventName, data);\n      });\n    }\n  }\n\n  listenEvent(eventName, callback) {\n    let callerClass = getCallerClassName();\n    console.log(`listenEvent: ${eventName} - ${callerClass}`);\n    this.callbacks[eventName] = Object.assign(this.callbacks[eventName] || {}, {\n      [callerClass]: callback\n    });\n  }\n\n  unlistenEvent(eventName) {\n    let callerClass = getCallerClassName();\n    console.log(`listenEvent: ${eventName} - ${callerClass}`);\n\n    if (this.callbacks[eventName]) {\n      delete this.callbacks[eventName][callerClass];\n    }\n  }\n\n}\n\nconst eventService = new EventService();\nexport default eventService;","map":{"version":3,"sources":["C:/xampp/htdocs/sns/src/services/EventService.js"],"names":["setObserverVisibility","element","callback","intersectionObserver","IntersectionObserver","entries","observer","forEach","entry","intersectionRatio","observe","getCallerClassName","callerClass","Error","stack","split","trim","indexOf","substr","EventService","constructor","callbacks","emitEvent","eventName","data","Object","keys","id","listenEvent","console","log","assign","unlistenEvent","eventService"],"mappings":"AACA,OAAO,MAAMA,qBAAqB,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACxD,MAAIC,oBAAoB,GAAG,IAAIC,oBAAJ,CAAyB,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACvED,IAAAA,OAAO,CAACE,OAAR,CAAgBC,KAAK,IAAIN,QAAQ,CAACM,KAAK,CAACC,iBAAN,GAA0B,CAA3B,CAAjC;AACH,GAF0B,CAA3B;AAGAN,EAAAA,oBAAoB,CAACO,OAArB,CAA6BT,OAA7B;AACH,CALM;;AAOP,MAAMU,kBAAkB,GAAE,MAAM;AAC5B,MAAIC,WAAW,GAAI,IAAIC,KAAJ,EAAD,CAAcC,KAAd,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,CAAhC,EAAmCC,IAAnC,GAA0CD,KAA1C,CAAgD,GAAhD,EAAqD,CAArD,CAAlB;AACA,SAAOH,WAAW,CAACK,OAAZ,CAAoB,GAApB,IAA2B,CAA3B,GAA+BL,WAAW,CAACM,MAAZ,CAAmB,CAAnB,EAAsBN,WAAW,CAACK,OAAZ,CAAoB,GAApB,CAAtB,CAA/B,GAAiFL,WAAxF;AACH,CAHD;;AAKA,MAAMO,YAAN,CAAmB;AACfC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiB,EAAjB;AACH;;AAEDC,EAAAA,SAAS,CAACC,SAAD,EAAYC,IAAI,GAAG,IAAnB,EAAyB;AAC9B;AACA,QAAI,KAAKH,SAAL,CAAeE,SAAf,CAAJ,EAA+B;AAC3B;AACAE,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKL,SAAL,CAAeE,SAAf,CAAZ,EAAuChB,OAAvC,CAAgDoB,EAAD,IAAQ;AACnD,aAAKN,SAAL,CAAeE,SAAf,EAA0BI,EAA1B,EAA8BH,IAA9B,EADmD,CAEnD;AACH,OAHD;AAIH;AACJ;;AAEDI,EAAAA,WAAW,CAACL,SAAD,EAAYrB,QAAZ,EAAsB;AAC7B,QAAIU,WAAW,GAAGD,kBAAkB,EAApC;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeP,SAAU,MAAKX,WAAY,EAAvD;AACA,SAAKS,SAAL,CAAeE,SAAf,IAA4BE,MAAM,CAACM,MAAP,CAAc,KAAKV,SAAL,CAAeE,SAAf,KAA6B,EAA3C,EAA+C;AAAC,OAACX,WAAD,GAAeV;AAAhB,KAA/C,CAA5B;AACH;;AAED8B,EAAAA,aAAa,CAACT,SAAD,EAAY;AACrB,QAAIX,WAAW,GAAGD,kBAAkB,EAApC;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeP,SAAU,MAAKX,WAAY,EAAvD;;AACA,QAAI,KAAKS,SAAL,CAAeE,SAAf,CAAJ,EAAgC;AAC5B,aAAO,KAAKF,SAAL,CAAeE,SAAf,EAA0BX,WAA1B,CAAP;AACH;AACJ;;AA5Bc;;AA+BnB,MAAMqB,YAAY,GAAG,IAAId,YAAJ,EAArB;AAEA,eAAec,YAAf","sourcesContent":["\r\nexport const setObserverVisibility = (element, callback) => {\r\n    let intersectionObserver = new IntersectionObserver((entries, observer) => {\r\n        entries.forEach(entry => callback(entry.intersectionRatio > 0));\r\n    });\r\n    intersectionObserver.observe(element);\r\n};\r\n\r\nconst getCallerClassName= () => {\r\n    let callerClass = (new Error()).stack.split(\"\\n\")[3].trim().split(\" \")[1];\r\n    return callerClass.indexOf('.') > 0 ? callerClass.substr(0, callerClass.indexOf('.')) : callerClass;\r\n};\r\n\r\nclass EventService {\r\n    constructor() {\r\n        this.callbacks = {};\r\n    }\r\n\r\n    emitEvent(eventName, data = null) {\r\n        // console.log(\"emit1: \", eventName, data);\r\n        if (this.callbacks[eventName]) {\r\n            // console.log(\"emit2: \", eventName, data);\r\n            Object.keys(this.callbacks[eventName]).forEach((id) => {\r\n                this.callbacks[eventName][id](data);\r\n                // console.log(\"emit3: \", eventName, data);\r\n            });\r\n        }\r\n    }\r\n\r\n    listenEvent(eventName, callback) {\r\n        let callerClass = getCallerClassName();\r\n        console.log(`listenEvent: ${eventName} - ${callerClass}`);\r\n        this.callbacks[eventName] = Object.assign(this.callbacks[eventName] || {}, {[callerClass]: callback});\r\n    }\r\n\r\n    unlistenEvent(eventName) {\r\n        let callerClass = getCallerClassName();\r\n        console.log(`listenEvent: ${eventName} - ${callerClass}`);\r\n        if( this.callbacks[eventName] ) {\r\n            delete this.callbacks[eventName][callerClass];\r\n        }\r\n    }\r\n}\r\n\r\nconst eventService = new EventService;\r\n\r\nexport default eventService;"]},"metadata":{},"sourceType":"module"}