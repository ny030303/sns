{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trackPromise = exports.getCounter = exports.promiseCounterUpdateEventId = exports.emitter = void 0;\n\nvar _tinyEmmiter = require(\"./tinyEmmiter\");\n\nvar _constants = require(\"./constants\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar emitter = new _tinyEmmiter.Emitter();\nexports.emitter = emitter;\nvar promiseCounterUpdateEventId = \"promise-counter-update\";\nexports.promiseCounterUpdateEventId = promiseCounterUpdateEventId;\n\nvar counter = _defineProperty({}, _constants.defaultArea, 0);\n\nvar getCounter = function getCounter(area) {\n  return counter[area];\n};\n\nexports.getCounter = getCounter;\n\nvar trackPromise = function trackPromise(promise, area) {\n  area = area || _constants.defaultArea;\n  incrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n\n  var onResolveHandler = function onResolveHandler() {\n    return decrementPromiseCounter(area);\n  };\n\n  promise.then(onResolveHandler, onResolveHandler);\n  return promise;\n};\n\nexports.trackPromise = trackPromise;\n\nvar incrementCounter = function incrementCounter(area) {\n  if (Boolean(counter[area])) {\n    counter[area]++;\n  } else {\n    counter[area] = 1;\n  }\n};\n\nvar anyPromiseInProgress = function anyPromiseInProgress(area) {\n  return counter[area] > 0;\n};\n\nvar decrementPromiseCounter = function decrementPromiseCounter(area) {\n  decrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n};\n\nvar decrementCounter = function decrementCounter(area) {\n  counter[area]--;\n}; // TODO: Enhancement we could catch here errors and throw an Event in case there's an HTTP Error\n// then the consumer of this event can be listening and decide what to to in case of error","map":{"version":3,"sources":["C:/xampp/htdocs/sns/node_modules/react-promise-tracker/lib/trackPromise.js"],"names":["Object","defineProperty","exports","value","trackPromise","getCounter","promiseCounterUpdateEventId","emitter","_tinyEmmiter","require","_constants","_defineProperty","obj","key","enumerable","configurable","writable","Emitter","counter","defaultArea","area","promise","incrementCounter","promiseInProgress","anyPromiseInProgress","emit","onResolveHandler","decrementPromiseCounter","then","Boolean","decrementCounter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trackPromise = exports.getCounter = exports.promiseCounterUpdateEventId = exports.emitter = void 0;\n\nvar _tinyEmmiter = require(\"./tinyEmmiter\");\n\nvar _constants = require(\"./constants\");\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar emitter = new _tinyEmmiter.Emitter();\nexports.emitter = emitter;\nvar promiseCounterUpdateEventId = \"promise-counter-update\";\nexports.promiseCounterUpdateEventId = promiseCounterUpdateEventId;\n\nvar counter = _defineProperty({}, _constants.defaultArea, 0);\n\nvar getCounter = function getCounter(area) {\n  return counter[area];\n};\n\nexports.getCounter = getCounter;\n\nvar trackPromise = function trackPromise(promise, area) {\n  area = area || _constants.defaultArea;\n  incrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n\n  var onResolveHandler = function onResolveHandler() {\n    return decrementPromiseCounter(area);\n  };\n\n  promise.then(onResolveHandler, onResolveHandler);\n  return promise;\n};\n\nexports.trackPromise = trackPromise;\n\nvar incrementCounter = function incrementCounter(area) {\n  if (Boolean(counter[area])) {\n    counter[area]++;\n  } else {\n    counter[area] = 1;\n  }\n};\n\nvar anyPromiseInProgress = function anyPromiseInProgress(area) {\n  return counter[area] > 0;\n};\n\nvar decrementPromiseCounter = function decrementPromiseCounter(area) {\n  decrementCounter(area);\n  var promiseInProgress = anyPromiseInProgress(area);\n  emitter.emit(promiseCounterUpdateEventId, promiseInProgress, area);\n};\n\nvar decrementCounter = function decrementCounter(area) {\n  counter[area]--;\n}; // TODO: Enhancement we could catch here errors and throw an Event in case there's an HTTP Error\n// then the consumer of this event can be listening and decide what to to in case of error"]},"metadata":{},"sourceType":"script"}